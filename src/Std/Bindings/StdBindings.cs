using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace Elk.Std.Bindings;

/// <summary>
/// Provides access to the standard library functions.
/// The other part of this class is automatically
/// generated by a source code generator.
/// </summary>
public static partial class StdBindings
{
    public static IEnumerable<string> FullSymbolNames
        => _modules.Keys.Concat(_functions.Keys);

    public static bool HasModule(string moduleName)
        => _modules.ContainsKey(moduleName);

    public static bool HasModule(IEnumerable<string> modulePath)
        => _modules.ContainsKey(string.Join("::", modulePath));

    public static StdStruct? GetStruct(string structName, string moduleName)
    {
        _structs.TryGetValue($"{moduleName}::{structName}", out var result);

        return result;
    }

    public static StdFunction? GetFunction(string functionName, IEnumerable<string>? modulePath)
    {
        var fullName = modulePath?.Any() is true
            ? $"{string.Join("::", modulePath)}::{functionName}"
            : functionName;
        _functions.TryGetValue(fullName, out var result);

        return result;
    }

    public static bool HasStruct(string structName, string moduleName)
        => _structs.ContainsKey($"{moduleName}::{structName}");


    public static bool HasFunction(string functionName, string? moduleName)
        => moduleName == null
            ? _functions.ContainsKey(functionName)
            : _functions.ContainsKey($"{moduleName}::{functionName}");

    public static bool HasFunction(string functionName, IEnumerable<string>? modulePath)
    {
        var moduleName = modulePath?.Any() is true
            ? string.Join("::", modulePath)
            : null;

        return HasFunction(functionName, moduleName);
    }

    public static bool GetModuleSymbolNames(
        string moduleName,
        out ImmutableArray<string> structNames,
        out ImmutableArray<string> functionNames)
    {
        var success = _modules.TryGetValue(moduleName, out var names);
        structNames = names.structNames;
        functionNames = names.functionNames;

        return success;
    }

    public static Type? GetRuntimeType(string name)
    {
        _types.TryGetValue(name, out var type);

        return type;
    }

    public static bool HasRuntimeType(string name)
        => _types.ContainsKey(name);
}