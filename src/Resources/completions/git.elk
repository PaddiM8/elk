cli::create git
    | cli::registerForCompletion
    | cli::addVerb help => &handleHelp
    | cli::addVerb add => &handleAdd
    | cli::addVerb branch => &handleBranch
    | cli::addVerb checkout => &handleCheckout
    | cli::addVerb switch => &handleSwitch
    | cli::addVerb rebase => &handleRebase
    | cli::addVerb reset => &handleReset
    | cli::addArgument({ "valueKind": "path", "variadic": true })
    | cli::addFlag({ "short": "v", "long": "version", "description": "display git version" })
    | cli::addFlag({ "short": "C", "valueKind": "directory", "description": "run as if started in dir" })
    | cli::addFlag({ "short": "c", "valueKind": "text", "description": "set config option" })
    | cli::addFlag({ "long": "config-env", "valueKind": "text", "description": "like -c but environment var" })
    | cli::addFlag({ "long": "exec-path", "valueKind": "directory", "description": "get or set the path to git" })
    | cli::addFlag({ "long": "html-path", "description": "print html docs path" })
    | cli::addFlag({ "long": "man-path", "description": "print man pages path" })
    | cli::addFlag({ "long": "info-path", "description": "print info docs path" })
    | cli::addFlag({ "short": "p", "long": "paginate", "description": "print output into pager" })
    | cli::addFlag({ "short": "P", "long": "no-pager", "description": "don't pipe output into pager" })
    | cli::addFlag({ "long": "git-dir", "valueKind": "text", "description": "set path to the repo" })
    | cli::addFlag({ "long": "work-tree", "valueKind": "text", "description": "set path to the working tree" })
    | cli::addFlag({ "long": "namespace", "description": "set Git namespace" })
    | cli::addFlag({ "long": "bare", "description": "treat the repo as bare" })
    | cli::addFlag({ "long": "no-replace-objects", "description": "disable replacement references" })
    | cli::addFlag({ "long": "literal-pathspecs", "description": "treat pathspecs literally" })
    | cli::addFlag({ "long": "glob-pathspecs", "description": "treat pathspecs as globs" })
    | cli::addFlag({ "long": "noglob-pathspecs", "description": "don't treat pathspecs as globs" })
    | cli::addFlag({ "long": "icase-pathspecs",  "description": "match pathspecs case-insensitively" })
    | cli::addFlag({ "long": "no-optional-locks", "description": "skip optional operations requiring locks" })
    | cli::addFlag({ "long": "list-cmds", "valueKind": "text", "description": "list commands by group" })

fn handleHelp(parser) {
    parser
        | cli::setDescription "Display manual of a Git command"
        | cli::addArgument({ "identifier": "verb", "valueKind": "text" })
}

fn handleAdd(parser) {
    parser
        | cli::addArgument({ "identifier": "file", "completionHandler": &unstagedFilesHandler, "variadic": true })
}

fn handleBranch(parser) {
    parser
        | cli::addArgument({ "completionHandler": &branchHandler })
        | cli::addFlag({ "short": "u", "valueKind": "text" })
        | cli::addFlag({ "long": "unset-upstream" })
        | cli::addFlag({ "short": "d" })
        | cli::addFlag({ "short": "D" })
        | cli::addFlag({ "short": "r" })
        | cli::addFlag({ "short": "m" })
        | cli::addFlag({ "short": "M" })
        | cli::addFlag({ "short": "c" })
        | cli::addFlag({ "short": "C" })
}

fn handleCheckout(parser) {
    parser
        | cli::addArgument({ "completionHandler": &branchHandler })
}

fn handleSwitch(parser) {
    parser
        | cli::addFlag({ "short": "c", "completionHandler": &branchHandler })
}

fn handleRebase(parser) {
    parser
        | cli::addFlag({ "short": "i", "completionHandler": &reflogHandler })
}

fn handleReset(parser) {
    parser
        | cli::addArgument({ "identifier": "file", "completionHandler": &stagedFilesHandler, "variadic": true })
        | cli::addFlag({ "long": "soft", "completionHandler": &reflogHandler })
        | cli::addFlag({ "long": "hard", "completionHandler": &reflogHandler })
        | cli::addFlag({ "long": "merge", "completionHandler": &reflogHandler })
        | cli::addFlag({ "short": "q", "completionHandler": &reflogHandler })
}

fn unstagedFilesHandler(value, state) {
    let repoPath = git rev-parse --show-toplevel
    git ls-files ${repoPath} --exclude-standard --others --modified | str::path::fuzzyFind(value)
}

fn stagedFilesHandler(value, state) {
    let workingDirectory = pwd
    let repoPath = git rev-parse --show-toplevel
    git diff --name-only --cached
        | map => x {
            repoPath
                | str::path::relative(workingDirectory)
                | str::path::join(x)
        }
}

fn branchHandler(value, state) {
    let localBranches = git for-each-ref \
        --format='%(refname:strip=2)%09Local Branch' \
        --sort=-committerdate refs/heads
        | disposeErr
        | map => &split "\t"
        | map => &iter::first
    let remoteBranches = git for-each-ref \
        --format='%(refname:strip=2)%09Remote Branch'
        | disposeErr
        | map => &split "\t"
        | map => &iter::first

    localBranches | iter::concat(remoteBranches)
}

fn reflogHandler(value, state) {
    git reflog --no-decorate | map => line {
        let (identifiers, description) = line | split(": ", 2)
        let head = identifiers | split | iter::at 1

        (head, description)
    }
}