let (gridText, movements) = read ${scriptPath}/input.txt | split "\n\n"
let grid = []

# expand the map
for (line, y) in gridText | str::lines | withIndex {
    let gridLine = []
    for (c, x) in line | withIndex {
        gridLine | pushAll("[]") if c == "O"
        gridLine | pushAll("##") if c == "#"
        gridLine | pushAll("..") if c == "."
        gridLine | pushAll("@.") if c == "@"
    }

    grid | push(gridLine)
}

# find the robot
let robotX = 0
let robotY = 0
for (line, y) in grid | withIndex {
    let robotIndex = line | iter::indexOf("@")
    if robotIndex != -1 {
        robotX = robotIndex
        robotY = y
    }
}

# simulate robot movements
for movement in movements {
    continue if movement == "\n"
    move(robotX, robotY, movement)
}

# find the boxes
let sum = 0
for (line, y) in grid | withIndex {
    for (c, x) in line | withIndex {
        sum += 100 * y + x if c == "["
    }
}

sum | assertEqual(503360)

fn traverse(fromX, fromY, movement, visited) {
    let toX = fromX
    let toY = fromY
    if movement == "<" {
        toX -= 1
    } else if movement == ">" {
        toX += 1
    } else if movement == "^" {
        toY -= 1
    } else if movement == "v" {
        toY += 1
    }

    let toChar = grid[toY][toX]
    return false if toChar == "#"

    if toChar == "[" or toChar == "]" {
        let moved = traverse(toX, toY, movement, visited)
        return false if not moved

        if movement == "^" or movement == "v" {
            let offset = if toChar == "[": 1 else -1
            moved = traverse(toX + offset, toY, movement, visited)
            return false if not moved
        }
    }

    visited | push((grid[fromY][fromX], fromX, fromY, toX, toY))

    true
}

fn move(startX, startY, movement) {
    let movements = into::list
    let moved = traverse(startX, startY, movement, movements)
    return if not moved

    for (c, fromX, fromY, toX, toY) in movements {
        grid[toY][toX] = c

        if c == "@" {
            robotX = toX
            robotY = toY
        }
    }

    for (_, fromX, fromY, _, _) in movements {
        continue if movements | iter::anyOf => coords {
            coords[3] == fromX and coords[4] == fromY
        }

        grid[fromY][fromX] = "."
    }
}
