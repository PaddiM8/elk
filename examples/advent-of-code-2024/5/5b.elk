let (ruleSection, updateSection) = read ${scriptPath}/input.txt | split "\n\n"
let ruleMap = ruleSection
    | str::lines
    | map => &split '|'
    | dict::createLookup

updateSection
    | str::lines
    | map => &split ','
    | map => &sort
    | where => &iter::at(1)
    | map => &iter::at(0)
    | map => pages { pages[len(pages) / 2] }
    | map => &into::int
    | math::sum
    | assertEqual(931)

fn sort(pages) {
    let i = 0
    let wasModified = false
    while i < len(pages) {
        let page = pages[i]
        for succeedingPage in iter::at(ruleMap, page) ?? [] {
            let succeedingPageIndex = iter::indexOf(pages, succeedingPage)
            continue if succeedingPageIndex >= i or succeedingPageIndex == -1

            pages | pop(i)
            pages | insert(succeedingPageIndex, page)
            i = succeedingPageIndex
            wasModified = true
        }

        i += 1
    }

    (pages, wasModified)
}
