#!/usr/bin/env elk

fn isSymbol(charInfo) {
    let c = charInfo->char
    isType(c, String) and c != "." and not str::isDigit(c)
}

fn findAdjacentSymbols(x, y, schematic) {
    # get a 3x3 area inside the schematic and check
    # if it contains a symbol
    schematic
        | withIndex
        | iter::skip(y - 1)
        | iter::take(3)
        | map => lineWithIndex {
            let (line, lineIndex) = lineWithIndex
            line
                | withIndex
                | iter::skip(x - 1)
                | iter::take(3)
                | map => symbol: new CharInfo(symbol[0], symbol[1], lineIndex)
        }
        | iter::flatten
        | where => &isSymbol
}

struct CharInfo(char, x, y)

fn getGearRatios(schematic) {
    # find all the numbers and save them together with
    # the coordinates of each digit
    # eg. [
    #   (["4", 0, 0], ["2", 1, 0]), # 42
    #   (["2", 2, 3], ["7", 2, 4]), # 27
    # ]
    let numbers = []
    for (line, y) in schematic | withIndex {
        numbers | push([])
        for (c, x) in line | withIndex {
            if str::isDigit(c) {
                numbers[-1] | push(new CharInfo(c, x, y))
            } else {
                numbers | push([])
            }
        }
    }

    let gears = {}
    for digits in numbers {
        for charInfo in digits {
            let symbols = findAdjacentSymbols(charInfo->x, charInfo->y, schematic)
                | where => x: x->char == "*"
            for symbol in symbols  {
                let key =  "${symbol->x}:${symbol->y}"
                gears[key] ??= []
                gears[key] | push(digits)
            }
        }
    }

    gears
        | dict::values
        | map => numbers {
            numbers
                | iter::distinct
                | map => digits {
                    digits
                        | map => x: x->char
                        | join
                        | into::int
                }
                | iter::collect
        }
        | where => x: len(x) == 2
        | map => x: x[0] * x[1]
}

cat ${scriptPath}/input.txt
    | getGearRatios
    | math::sum
    | assertEqual(23618617)
