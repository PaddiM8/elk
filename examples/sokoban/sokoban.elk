fn create_board() {
    {
        "max_bounds": (0, 0),
        "player_pos": (0, 0),
        "storage_blocks": {},
        "stored_crates": 0,
        "blocks": {}
    }
}

fn get_board_max_bounds(board):
    board["max_bounds"]

fn set_board_max_bounds(board, x, y) {
    board["max_bounds"] = (x, y)
}

fn get_player(board) {
    let pos = board["player_pos"]

    get_block(board, pos[0], pos[1])
}

fn get_board_blocks(board):
    board["blocks"]

fn get_board_storage_blocks(board):
    board["storage_blocks"]

fn get_block(board, x, y) {
    let key = coordinates_to_key(x, y)
    let blocks = get_board_blocks(board)
    let storages = get_board_storage_blocks(board)

    if key in blocks {
        blocks[key]
    } else if key in storages {
        storages[key]
    } else {
        nil
    }
}

fn get_points(board):
    board["stored_crates"]

fn coordinates_to_key(x, y):
    "{x}:{y}"

fn block_to_key(block):
    coordinates_to_key(block[2], block[3])

fn add_wall(board, x, y):
    add_block(board, "wall", x, y)

fn add_crate(board, x, y):
    add_block(board, "crate", x, y)

fn add_storage(board, x, y):
    add_block(board, "storage", x, y)

fn add_stored_crate(board, x, y) {
    add_block(board, "crate", x, y)
    add_block(board, "storage", x, y)
    board["stored_crates"] += 1
}

fn remove_block(board, block):
    get_board_blocks(board) | remove(block_to_key(block))

fn move_block(board, block, to_x, to_y) {
    if get_block_type(block) == "crate" {
        let block_at_target = get_block(board, to_x, to_y)

        if block_is_on_storage(board, block):
            board["stored_crates"] -= 1

        if get_block_type(block_at_target) == "storage":
            board["stored_crates"] += 1
    }

    remove_block(board, block)
    add_block(board, get_block_type(block), to_x, to_y)
}

fn set_block_type(block, new_type):
    block[1] = new_type

fn has_won(board):
    board["stored_crates"] == len(board["storage_blocks"])

fn block_is_on_storage(board, block):
    block && block_to_key(block) in board["storage_blocks"]

fn add_block(board, type, x, y) {
    let block = ["block", type, x, y]
    let blocks = get_board_blocks(board)
    let key = block_to_key(block)
    if type == "storage" {
        board["storage_blocks"][key] = block
    } else {
        blocks[key] = block
    }

    let (max_x, max_y) = get_board_max_bounds(board)
    if max_x < x {
        set_board_max_bounds(board, x, max_y)
    } else if max_y < y {
        set_board_max_bounds(board, max_x, y)
    }
}

fn get_block_type(block):
    block[1] if block

fn get_block_pos(block):
    (block[2], block[3])

fn add_player(board, x, y) {
    add_block(board, "player", x, y)
    board["player_pos"] = (x, y)
}

fn get_adjacent_block_pos(by_block, direction) {
    let (x, y) = get_block_pos(by_block)
    if direction == "up" {
        y -= 1
    } else if direction == "right" {
        x += 1
    } else if direction == "down" {
        y += 1
    } else if direction == "left" {
        x -= 1
    }

    (x, y)
}

fn move_player(board, direction) {
    let player = get_player(board)
    if player_can_move(board, direction) {
        let (player_target_x, player_target_y) = get_adjacent_block_pos(player, direction)
        let block_at_player_target = get_block(board, player_target_x, player_target_y)

        if get_block_type(block_at_player_target) == "crate" {
            let (crate_target_x, crate_target_y) = get_adjacent_block_pos(block_at_player_target, direction)
            move_block(board, block_at_player_target, crate_target_x, crate_target_y)
        }

        move_block(board, player, player_target_x, player_target_y)
        board["player_pos"] = (player_target_x, player_target_y)
    }
}

fn player_can_move(board, direction) {
    let player = get_player(board)
    let (adjacent_x, adjacent_y) = get_adjacent_block_pos(player, direction)
    let adjacent_block = get_block(board, adjacent_x, adjacent_y)

    !adjacent_block ||
        get_block_type(adjacent_block) == "storage" ||
        get_block_type(adjacent_block) == "crate" && crate_can_move(board, adjacent_block, direction)
}

fn crate_can_move(board, crate, direction) {
    let (adjacent_x, adjacent_y) = get_adjacent_block_pos(crate, direction)
    let adjacent_block = get_block(board, adjacent_x, adjacent_y)

    !adjacent_block || get_block_type(adjacent_block) == "storage"
}