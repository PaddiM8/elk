fn createBoard() {
    {
        "maxBounds": (0, 0),
        "playerPos": (0, 0),
        "storageBlocks": {},
        "storedCrates": 0,
        "blocks": {}
    }
}

fn getBoardMaxBounds(board):
    board["maxBounds"]

fn setBoardMaxBounds(board, x, y) {
    board["maxBounds"] = (x, y)
}

fn getPlayer(board) {
    let pos = board["playerPos"]

    getBlock(board, pos[0], pos[1])
}

fn getBoardBlocks(board):
    board["blocks"]

fn getBoardStorageBlocks(board):
    board["storageBlocks"]

fn getBlock(board, x, y) {
    let key = coordinatesToKey(x, y)
    let blocks = getBoardBlocks(board)
    let storages = getBoardStorageBlocks(board)

    if key in blocks {
        blocks[key]
    } else if key in storages {
        storages[key]
    } else {
        nil
    }
}

fn getPoints(board):
    board["storedCrates"]

fn coordinatesToKey(x, y):
    "{x}:{y}"

fn blockToKey(block):
    coordinatesToKey(block[2], block[3])

fn addWall(board, x, y):
    addBlock(board, "wall", x, y)

fn addCrate(board, x, y):
    addBlock(board, "crate", x, y)

fn addStorage(board, x, y):
    addBlock(board, "storage", x, y)

fn addStoredCrate(board, x, y) {
    addBlock(board, "crate", x, y)
    addBlock(board, "storage", x, y)
    board["storedCrates"] += 1
}

fn removeBlock(board, block):
    getBoardBlocks(board) | remove(blockToKey(block))

fn moveBlock(board, block, toX, toY) {
    if getBlockType(block) == "crate" {
        let blockAtTarget = getBlock(board, toX, toY)

        if blockIsOnStorage(board, block):
            board["storedCrates"] -= 1

        if getBlockType(blockAtTarget) == "storage":
            board["storedCrates"] += 1
    }

    removeBlock(board, block)
    addBlock(board, getBlockType(block), toX, toY)
}

fn setBlockType(block, newType):
    block[1] = newType

fn hasWon(board):
    board["storedCrates"] == len(board["storageBlocks"])

fn blockIsOnStorage(board, block):
    block and blockToKey(block) in board["storageBlocks"]

fn addBlock(board, type, x, y) {
    let block = ["block", type, x, y]
    let blocks = getBoardBlocks(board)
    let key = blockToKey(block)
    if type == "storage" {
        board["storageBlocks"][key] = block
    } else {
        blocks[key] = block
    }

    let (maxX, maxY) = getBoardMaxBounds(board)
    if maxX < x {
        setBoardMaxBounds(board, x, maxY)
    } else if maxY < y {
        setBoardMaxBounds(board, maxX, y)
    }
}

fn getBlockType(block):
    block[1] if block

fn getBlockPos(block):
    (block[2], block[3])

fn addPlayer(board, x, y) {
    addBlock(board, "player", x, y)
    board["playerPos"] = (x, y)
}

fn getAdjacentBlockPos(byBlock, direction) {
    let (x, y) = getBlockPos(byBlock)
    if direction == "up" {
        y -= 1
    } else if direction == "right" {
        x += 1
    } else if direction == "down" {
        y += 1
    } else if direction == "left" {
        x -= 1
    }

    (x, y)
}

fn movePlayer(board, direction) {
    let player = getPlayer(board)
    if playerCanMove(board, direction) {
        let (playerTargetX, playerTargetY) = getAdjacentBlockPos(player, direction)
        let blockAtPlayerTarget = getBlock(board, playerTargetX, playerTargetY)

        if getBlockType(blockAtPlayerTarget) == "crate" {
            let (crateTargetX, crateTargetY) = getAdjacentBlockPos(blockAtPlayerTarget, direction)
            moveBlock(board, blockAtPlayerTarget, crateTargetX, crateTargetY)
        }

        moveBlock(board, player, playerTargetX, playerTargetY)
        board["playerPos"] = (playerTargetX, playerTargetY)
    }
}

fn playerCanMove(board, direction) {
    let player = getPlayer(board)
    let (adjacentX, adjacentY) = getAdjacentBlockPos(player, direction)
    let adjacentBlock = getBlock(board, adjacentX, adjacentY)

    not adjacentBlock or
        getBlockType(adjacentBlock) == "storage" or
        getBlockType(adjacentBlock) == "crate" and crateCanMove(board, adjacentBlock, direction)
}

fn crateCanMove(board, crate, direction) {
    let (adjacentX, adjacentY) = getAdjacentBlockPos(crate, direction)
    let adjacentBlock = getBlock(board, adjacentX, adjacentY)

    not adjacentBlock or getBlockType(adjacentBlock) == "storage"
}