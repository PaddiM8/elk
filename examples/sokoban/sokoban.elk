struct Board(maxBounds, playerPos, storageBlocks, storedCrates, blocks)
struct Block(type, x, y)

module block {
    pub fn toKey(block):
        coordinatesToKey(block->x, block->y)

    pub fn getPos(block):
        (block->x, block->y)

    pub fn getType(block):
        block->type if block

    pub fn getAdjacentBlockPos(byBlock, direction) {
        let (x, y) = byBlock | getPos
        if direction == "up" {
            y -= 1
        } else if direction == "right" {
            x += 1
        } else if direction == "down" {
            y += 1
        } else if direction == "left" {
            x -= 1
        }

        (x, y)
    }
}

pub fn createBoard() {
    new Board(
        (0, 0),
        (0, 0),
        {},
        0,
        {}
    )
}

pub fn getBoardMaxBounds(board):
    board->maxBounds

pub fn setBoardMaxBounds(board, x, y) {
    board->maxBounds = (x, y)
}

pub fn getPlayer(board) {
    let pos = board->playerPos

    board | getBlock(pos[0], pos[1])
}

fn getBoardBlocks(board):
    board->blocks

fn getBoardStorageBlocks(board):
    board->storageBlocks

pub fn getBlock(board, x, y) {
    let key = coordinatesToKey(x, y)
    let blocks = board | getBoardBlocks
    let storages = board | getBoardStorageBlocks

    if key in blocks {
        blocks[key]
    } else if key in storages {
        storages[key]
    } else {
        nil
    }
}

pub fn getPoints(board):
    board->storedCrates

fn coordinatesToKey(x, y):
    "${x}:${y}"

pub fn addWall(board, x, y):
    board | addBlock(new Block("wall", x, y))

pub fn addCrate(board, x, y):
    board | addBlock(new Block("crate", x, y))

pub fn addStorage(board, x, y):
    board | addBlock(new Block("storage", x, y))

pub fn addStoredCrate(board, x, y) {
    board | addBlock(new Block("crate", x, y))
    board | addBlock(new Block("storage", x, y))
    board->storedCrates += 1
}

pub fn removeBlock(board, block):
    board | getBoardBlocks | remove(block::toKey(block))

fn moveBlock(board, block, toX, toY) {
    if block::getType(block) == "crate" {
        let blockAtTarget = board | getBlock(toX, toY)

        if board | blockIsOnStorage(block):
            board->storedCrates -= 1

        if block::getType(blockAtTarget) == "storage":
            board->storedCrates += 1
    }

    board | removeBlock(block)
    board | addBlock(new Block(block::getType(block), toX, toY))
}

pub fn hasWon(board):
    board->storedCrates == len(board->storageBlocks)

pub fn blockIsOnStorage(board, block):
    block and block::toKey(block) in board->storageBlocks

pub fn addBlock(board, block) {
    let blocks = board | getBoardBlocks
    let key = block | block::toKey
    if block->type == "storage" {
        board->storageBlocks[key] = block
    } else {
        blocks[key] = block
    }

    let (maxX, maxY) = board | getBoardMaxBounds
    if maxX < block->x {
        board | setBoardMaxBounds(block->x, maxY)
    } else if maxY < block->y {
        board | setBoardMaxBounds(maxX, block->y)
    }
}

pub fn addPlayer(board, x, y) {
    board | addBlock(new Block("player", x, y))
    board->playerPos = (x, y)
}

pub fn movePlayer(board, direction) {
    let player = board | getPlayer
    if board | playerCanMove(direction) {
        let (playerTargetX, playerTargetY) = player | block::getAdjacentBlockPos(direction)
        let blockAtPlayerTarget = board | getBlock(playerTargetX, playerTargetY)

        if block::getType(blockAtPlayerTarget) == "crate" {
            let (crateTargetX, crateTargetY) = blockAtPlayerTarget | block::getAdjacentBlockPos(direction)
            board | moveBlock(blockAtPlayerTarget, crateTargetX, crateTargetY)
        }

        board | moveBlock(player, playerTargetX, playerTargetY)
        board->playerPos = (playerTargetX, playerTargetY)
    }
}

fn playerCanMove(board, direction) {
    let player = board | getPlayer
    let (adjacentX, adjacentY) = player | block::getAdjacentBlockPos(direction)
    let adjacentBlock = board | getBlock(adjacentX, adjacentY)

    not adjacentBlock or
        block::getType(adjacentBlock) == "storage" or
        block::getType(adjacentBlock) == "crate" and crateCanMove(board, adjacentBlock, direction)
}

fn crateCanMove(board, crate, direction) {
    let (adjacentX, adjacentY) = crate | block::getAdjacentBlockPos(direction)
    let adjacentBlock = board | getBlock(adjacentX, adjacentY)

    not adjacentBlock or block::getType(adjacentBlock) == "storage"
}
