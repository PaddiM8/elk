#!/usr/bin/env elk

with ./sokoban

fn getBoardString(board) {
    let boardString = ""
    let (_, maxY) = board | sokoban::getBoardMaxBounds
    for y in 0..(maxY + 1):
        boardString += rowToString(board, y) + "\n"

    boardString
}

fn rowToString(board, y) {
    let row = ""
    let (maxX, _) = board | sokoban::getBoardMaxBounds
    for x in 0..(maxX + 1) {
        let block = board | sokoban::getBlock(x, y)
        if not block {
            row += " "
            continue
        }

        let blockType = block | sokoban::block::getType
        if blockType == "wall" {
            row += "#" | ansi::color brightBlack
        } else if blockType == "crate" {
            let char = if board | sokoban::blockIsOnStorage(block): "*" else "o"
            row += char | ansi::color blue
        } else if blockType == "player" {
            let char = if board | sokoban::blockIsOnStorage(block): "+" else "@"
            row += char | ansi::color red
        } else if blockType == "storage" {
            row += "." | ansi::color brightRed
        }
    }

    row
}

fn loadBoard(filePath) {
    let board = sokoban::createBoard()
    let fileContent = read(filePath)
    let x = 0
    let y = 0
    for c in fileContent {
        if c == "#" {
            board | sokoban::addWall(x, y)
        } else if c == "@" {
            board | sokoban::addPlayer(x, y)
        } else if c == "+" {
            board | sokoban::addPlayer(x, y)
            board | sokoban::addStorage(x, y)
        } else if c == "o" {
            board | sokoban::addCrate(x, y)
        } else if c == "*" {
            board | sokoban::addStoredCrate(x, y)
        } else if c == "." {
            board | sokoban::addStorage(x, y)
        }

        if c == "\n" {
            x = 0
            y += 1
        } else {
            x += 1
        }
    }

    board
}

fn startGame(mapPath) {
    print(ansi::hideCursor)

    let board = loadBoard(mapPath)
    let gameDone = false
    while not gameDone {
        updateScreen(board)
        let inputKey = io::readKey()->key
        if inputKey == "w" or inputKey == "up" {
            board | sokoban::movePlayer("up")
        } else if inputKey == "a" or inputKey == "left" {
            board | sokoban::movePlayer("left")
        } else if inputKey == "s" or inputKey == "down" {
            board | sokoban::movePlayer("down")
        } else if inputKey == "d" or inputKey == "right" {
            board | sokoban::movePlayer("right")
        }

        gameDone = inputKey == "q" or sokoban::hasWon(board)
    }

    if sokoban::hasWon(board) {
        updateScreen(board)
        println("You won!" | ansi::color green)
        println Press enter to continue
        io::input()
        clear()
    }
}

fn updateScreen(board) {
    let boardString = board
        | getBoardString
        | str::lines
        | map => &op::add(ansi::clearToRight())
        | join "\n"
    print(ansi::setCursor(0, 0))
    println("Points:", board | sokoban::getPoints, ansi::clearToEnd())
    println(boardString)
}

let runGame = true
while runGame {
    clear()
    print(ansi::showCursor)
    println Welcome to Sokoban, please choose a level:

    # get levels
    let maps = scriptPath() + "/maps.txt" | read | str::lines

    for (mapPath, i) in maps | withIndex {
        let mapName = mapPath | split(".") | iter::first
        let number = i + 1 | ansi::color yellow
        println "${number}. ${mapName}"
    }

    let quitId = len(maps) + 1 | ansi::color yellow
    println "${quitId}. Quit"

    let mapId = io::input("Choose: " | ansi::color blue)
    runGame = mapId != quitId

    if runGame and str::isDigit(mapId) {
        let mapPath = scriptPath() + "/" + maps[into::int(mapId) - 1]
        startGame(mapPath)
    }
}

fn __onExit() {
    print(ansi::showCursor)
}
