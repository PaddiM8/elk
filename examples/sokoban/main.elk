include "sokoban.elk"

fn getBoardString(board) {
    let boardString = ""
    let (_, maxY) = getBoardMaxBounds(board)
    for y in 0..(maxY + 1):
        boardString += rowToString(board, y) + "\n"

    boardString
}

fn rowToString(board, y) {
    let row = ""
    let (maxX, _) = getBoardMaxBounds(board)
    for x in 0..(maxX + 1) {
        let block = getBlock(board, x, y)
        if !bool(block) {
            row += " "
        } else {
            let blockType = getBlockType(block)
            if blockType == "wall" {
                row += "#"
            } else if blockType == "crate" {
                row += if blockIsOnStorage(board, block): "*" else "o"
            } else if blockType == "player" {
                row += if blockIsOnStorage(board, block): "+" else "@"
            } else if blockType == "storage" {
                row += "."
            }
        }
    }

    row
}

fn loadBoard(filePath) {
    let board = createBoard()
    let fileContent = read(filePath)
    let x = 0
    let y = 0
    for c in fileContent {
        if c == "#" {
            addWall(board, x, y)
        } else if c == "@" {
            addPlayer(board, x, y)
        } else if c == "+" {
            addPlayer(board, x, y)
            addStorage(board, x, y)
        } else if c == "o" {
            addCrate(board, x, y)
        } else if c == "*" {
            addStoredCrate(board, x, y)
        } else if c == "." {
            addStorage(board, x, y)
        }

        if c == "\n" {
            x = 0
            y += 1
        } else {
            x += 1
        }
    }

    board
}

fn startGame(mapPath) {
    let board = loadBoard(mapPath)
    let gameDone = false
    while !gameDone {
        updateScreen(board)
        let inputKey = getKey()
        if (inputKey == "w") {
            movePlayer(board, "up")
        } else if inputKey == "a" {
            movePlayer(board, "left")
        } else if inputKey == "s" {
            movePlayer(board, "down")
        } else if inputKey == "d" {
            movePlayer(board, "right")
        }

        gameDone = inputKey == "q" || hasWon(board)
    }

    if hasWon(board) {
        updateScreen(board)
        println("You won!")
        println("Press enter to continue")
        input()
        clear()
    }
}

fn updateScreen(board) {
    let boardString = getBoardString(board)
    clear()
    println("Points: {getPoints(board)}")
    println(boardString)
}

let runGame = true
while runGame {
    println("Welcome to Sokoban, please choose a level:")

    # get levels
    let maps = read(scriptPath() + "/maps.txt") | lines
    println(maps)

    for (mapPath, i) in maps | withIndex {
        let mapName = (mapPath | split("."))[0]
        println("{i + 1}. {mapName}")
    }

    let quitId = str(len(maps) + 1)
    println("{quitId}. Quit")

    let mapId = input("Choose: ")
    runGame = mapId != quitId

    if runGame && isDigit(mapId) {
        let mapPath = scriptPath() + "/" + maps[int(mapId) - 1]
        startGame(mapPath)
    }
}