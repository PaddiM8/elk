with ./sokoban

fn getBoardString(board) {
    let boardString = ""
    let (_, maxY) = board | sokoban::getBoardMaxBounds
    for y in 0..(maxY + 1):
        boardString += rowToString(board, y) + "\n"

    boardString
}

fn rowToString(board, y) {
    let row = ""
    let (maxX, _) = board | sokoban::getBoardMaxBounds
    for x in 0..(maxX + 1) {
        let block = board | sokoban::getBlock(x, y)
        if not block {
            row += " "
            continue
        }

        let blockType = block | sokoban::block::getType
        if blockType == "wall" {
            row += "#"
        } else if blockType == "crate" {
            row += if board | sokoban::blockIsOnStorage(block): "*" else "o"
        } else if blockType == "player" {
            row += if board | sokoban::blockIsOnStorage(block): "+" else "@"
        } else if blockType == "storage" {
            row += "."
        }
    }

    row
}

fn loadBoard(filePath) {
    let board = sokoban::createBoard()
    let fileContent = read(filePath)
    let x = 0
    let y = 0
    for c in fileContent {
        if c == "#" {
            board | sokoban::addWall(x, y)
        } else if c == "@" {
            board | sokoban::addPlayer(x, y)
        } else if c == "+" {
            board | sokoban::addPlayer(x, y)
            board | sokoban::addStorage(x, y)
        } else if c == "o" {
            board | sokoban::addCrate(x, y)
        } else if c == "*" {
            board | sokoban::addStoredCrate(x, y)
        } else if c == "." {
            board | sokoban::addStorage(x, y)
        }

        if c == "\n" {
            x = 0
            y += 1
        } else {
            x += 1
        }
    }

    board
}

fn startGame(mapPath) {
    clear()
    println(ansi::hideCursor)

    let board = loadBoard(mapPath)
    let gameDone = false
    while not gameDone {
        updateScreen(board)
        let inputKey = io::getKey()
        if (inputKey == "w") {
            board | sokoban::movePlayer("up")
        } else if inputKey == "a" {
            board | sokoban::movePlayer("left")
        } else if inputKey == "s" {
            board | sokoban::movePlayer("down")
        } else if inputKey == "d" {
            board | sokoban::movePlayer("right")
        }

        gameDone = inputKey == "q" or sokoban::hasWon(board)
    }

    if sokoban::hasWon(board) {
        updateScreen(board)
        println You won!
        println Press enter to continue
        io::input()
        clear()
    }
}

fn updateScreen(board) {
    let boardString = board | getBoardString
    println(ansi::setCursor(0, 0))
    println("Points:", board | sokoban::getPoints)
    println(boardString)
}

let runGame = true
while runGame {
    println(ansi::showCursor)
    println Welcome to Sokoban, please choose a level:

    # get levels
    let maps = scriptPath() + "/maps.txt" | read | str::lines

    for (mapPath, i) in maps | withIndex {
        let mapName = mapPath | split(".") | iter::first
        println "${i + 1}. ${mapName}"
    }

    let quitId = len(maps) + 1 | into::str
    println "${quitId}. Quit"

    let mapId = io::input "Choose: "
    runGame = mapId != quitId

    if runGame and str::isDigit(mapId) {
        let mapPath = scriptPath() + "/" + maps[into::int(mapId) - 1]
        startGame(mapPath)
    }
}
