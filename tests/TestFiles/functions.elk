fn confirmParamCount(expectedCount, params...) {
    assertEqual(len(params), expectedCount)
}

confirmParamCount(1, "a")
confirmParamCount(2, "a", "b")

assertEqual((simple test), "test")
assertEqual(simple("test"), "test")

fn simple(a) {
    a
}

assertEqual((empty), "empty")
assertEqual(empty(), "empty")

fn empty() {
    "empty"
}

# default argument
fn withDefault(a, b=[]) {
    assertEqual(a, "a")
    assertEqual(len(b), 0)
    b | push(1)
    assertEqual(len(b), 1)
}

withDefault("a")
withDefault("a")
withDefault("a", [])

# => closure with default arguments
fn closureWithDefault(a = 5) => closure {
    closure(a)
}

assertEqual(closureWithDefault() => x { x + 1 }, 6)
assertEqual(closureWithDefault(2) => x { x + 1 }, 3)

# => closure with variadic
fn closureWithVariadic(args...) => closure {
    closure(args)
}

assertEqual(closureWithVariadic() => &join(" "), "")
assertEqual(closureWithVariadic("a", "b") => &join(" "), "a b")

# recursion
fn rec(x) {
    if x > 0: rec(x - 1) else x
}

assertEqual(rec(10), 0)

# does it return?
fn ret() {
    return 1
    assert(false)
    return 2
}

assertEqual(ret(), 1)

# globs
fn count(args...) {
    args | len
}

let counted = count *
assert(counted > 0)