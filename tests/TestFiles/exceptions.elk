let result = try {
    1 + 1
} catch ex {
    assert(false)
}

assertEqual(result, 2)

let result2 = try {
    list::column(1, 1)
    assert(false)
} catch e with Integer {
    assert(false)
} catch e {
    assert(isType(error::value(e), ElkErrorValue))

    "caught"
}

assertEqual(result2, "caught")

struct CustomError(msg)
let result3 = try {
    throw new CustomError(123)
    assert(false)
} catch e with CustomError {
    error::value(e)->msg
} catch {
    assert(false)
}

assertEqual(result3, 123)

let rethrew = false
try {
    try {
        throw "hello"
    } catch e {
        rethrew = true
        throw e
    }

    assert(false)
} catch e {
    assertEqual(error::value(e), "hello")
}

assert(rethrew)

try {
} catch e with String {
} catch e {
}

fn fn1(x) {
    fn2(x)
}

fn fn2(x) {
    fn3(x)
}

fn fn3(x) {
    throw x
}

let result = try {
    fn1("hello")
} catch ex {
    ex | error::value
}

assertEqual(result, "hello")

# non-redirecting or
("try" || "else") | assertEqual("try")
({ "str" / 2 } || "else") | assertEqual("else")